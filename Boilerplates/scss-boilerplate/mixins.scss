/* -------------------------------------------------------------------------- */
/*                              RESPONSIVE LAYOUT                             */
/* -------------------------------------------------------------------------- */

// Respond above.
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

/* -------------------------------------------------------------------------- */
/*                           BACKGROUND IMAGE CONFIG                          */
/* -------------------------------------------------------------------------- */

@mixin backgroundSize($parallax: inherit) {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: $parallax;
}

/* -------------------------------------------------------------------------- */
/*                                 FLEX CENTER                                */
/* -------------------------------------------------------------------------- */

@mixin flexCenter($direction: row) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

/* -------------------------------------------------------------------------- */
/*                           POSITION ELEMENT CENTER                          */
/* -------------------------------------------------------------------------- */

@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

/* -------------------------------------------------------------------------- */
/*                                  CLEARFIX                                  */
/* -------------------------------------------------------------------------- */

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

// usage
.asd {
  @extend %clearfix;
}

/* -------------------------------------------------------------------------- */
/*                                  FONT SIZE                                 */
/* -------------------------------------------------------------------------- */

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// //Usage
// p {
//   @include font-size(14px)
// }
// //Output
// p {
//   font-size: 14px; //For unsupported browsers
//   font-size: 0.8rem;
// }

/* -------------------------------------------------------------------------- */
/*                           RETINA IMAGE BACKGROUND                          */
/* -------------------------------------------------------------------------- */

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// //Usage
// div.logo {
//   background: url("logo.png") no-repeat;
//   @include image-2x("logo2x.png", 100px, 25px);
// }

/* -------------------------------------------------------------------------- */
/*                             BACKGROUDN GRADIENT                            */
/* -------------------------------------------------------------------------- */

@mixin background-gradient($start-color, $end-color, $orientation: 'vertical') {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(
      center,
      ellipse cover,
      $start-color,
      $end-color
    );
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// //Usage:
// //$start-color, $end-color, $orientation - vertical/horizontal/radial
// .foo {
//   @include background-gradient(red, black, 'vertical');
// }
